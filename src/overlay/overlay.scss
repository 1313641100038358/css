// stylelint-disable selector-max-compound-selectors, max-nesting-depth, selector-max-specificity, primer/borders
// replace with primitives
$primer-borderRadius-large: 0.75rem;

// https://github.com/github/primer/issues/1026
$primer-duration-slow: 250ms;
$primer-easing-out: cubic-bezier(0.33, 1, 0.68, 1);

$Overlay-width: (
  xsmall: 192px,
  small: 256px,
  medium: 320px,
  large: 480px,
  xlarge: 640px,
  xxlarge: 960px
) !default;

$Overlay-height: (
  xsmall: 192px,
  small: 256px,
  medium: 320px,
  large: 432px,
  xlarge: 600px
) !default;

// Overlay structure
// =================
//
// .Overlay-backdrop
// ├─ .Overlay
// │  ├─ .Overlay-header
// │  │  ├─ .Overlay-headerContentWrap
// │  │  │  ├─ .Overlay-titleWrap
// │  │  │  │  ├─ .Overlay-title
// │  │  │  │  ├─ .Overlay-description
// │  │  ├─ .Overlay-actionWrap
// │  │  │  ├─ .Overlay-closeButton
// │  ├─ .Overlay-body
// │  ├─ .Overlay-footer
//
// Todo:
// - Overlay-form?
// - Deprecate Overlay-closeButton in favor of redesigned iconButton

// Visibility
// Todo: these are applied to `Overlay-backdrop`, not to `Overlay`

.Overlay--hidden {
  display: none !important;
}

.Overlay--visibilityHidden {
  height: 0;
  overflow: hidden;
  visibility: hidden;
  opacity: 0;
}

.Overlay {
  position: relative;
  display: flex;
  min-width: #{map-get($Overlay-width, 'xsmall')};
  flex-direction: column;
  background-color: var(--color-canvas-overlay);
  border-radius: $primer-borderRadius-large;
  box-shadow: var(--color-overlay-shadow);
  opacity: 1;
  max-height: 100vh;

  @supports (height: 100dvh) {
    max-height: 100dvh;
  }

  // Dimensions
  // Todo: auto-generate based on Scss variables?

  &.Overlay--height-auto {
    height: auto;
  }

  &.Overlay--height-xsmall {
    height: min(#{map-get($Overlay-height, 'xsmall')}, 100vh - 2rem);
  }

  &.Overlay--height-small {
    height: min(#{map-get($Overlay-height, 'small')}, 100vh - 2rem);
  }

  &.Overlay--height-medium {
    height: min(#{map-get($Overlay-height, 'medium')}, 100vh - 2rem);
  }

  &.Overlay--height-large {
    height: min(#{map-get($Overlay-height, 'large')}, 100vh - 2rem);
  }

  &.Overlay--height-xlarge {
    height: min(#{map-get($Overlay-height, 'xlarge')}, 100vh - 2rem);
  }

  &.Overlay--width-auto {
    width: auto;
  }

  &.Overlay--width-xsmall {
    width: min(#{map-get($Overlay-width, 'xsmall')}, 100vw - 2rem);
  }

  &.Overlay--width-small {
    width: min(#{map-get($Overlay-width, 'small')}, 100vw - 2rem);
  }

  &.Overlay--width-medium {
    width: min(#{map-get($Overlay-width, 'medium')}, 100vw - 2rem);
  }

  &.Overlay--width-large {
    // stylelint-disable-next-line primer/responsive-widths
    width: min(#{map-get($Overlay-width, 'large')}, 100vw - 2rem);
  }

  &.Overlay--width-xlarge {
    // stylelint-disable-next-line primer/responsive-widths
    width: min(#{map-get($Overlay-width, 'xlarge')}, 100vw - 2rem);
  }

  &.Overlay--width-xxlarge {
    // stylelint-disable-next-line primer/responsive-widths
    width: min(#{map-get($Overlay-width, 'xxlarge')}, 100vw - 2rem);
  }

  // Motion

  &.Overlay--motion-scaleFade {
    @media (prefers-reduced-motion: no-preference) {
      // Todo: replace with primer-duration-slow token
      animation: $primer-duration-slow $primer-easing-out Overlay--motion-scaleFade;
    }
  }

  // &.Overlay--motion-slide {
  //   @media (prefers-reduced-motion: no-preference) {
  //     animation: $primer-duration-slow $primer-easing-out Overlay--motion-slide;
  //   }
  // }
}

// for <form> element that wraps entire contents of overlay
.Overlay-form {
  display: flex;
  overflow: auto;
  flex-direction: column;
  flex-grow: 1;
}

.Overlay-header {
  z-index: 1;
  display: flex;
  flex-direction: column;

  &.Overlay-header--divided {
    padding-bottom: $spacer-2;
    // stylelint-disable-next-line primer/box-shadow
    box-shadow: inset 0 #{-$border-width} var(--color-border-default);

    .Overlay-headerSlot {
      margin-bottom: -$spacer-2;
    }

    + .Overlay-body {
      padding-top: $spacer-3;
    }
  }

  &.Overlay-header--large {
    .Overlay-headerContentWrap {
      .Overlay-titleWrap {
        gap: $spacer-2;

        .Overlay-title {
          font-size: $h3-size;
        }

        .Overlay-description {
          font-size: $body-font-size;
        }
      }
    }
  }

  &.Overlay-header--custom {
    .Overlay-title, .Overlay-description {
      display: none !important;
    }
  }

  .Overlay-headerContentWrap {
    display: flex;
    align-items: flex-start;
    gap: $spacer-2;
    padding: $spacer-2 $spacer-2 0 $spacer-2;

    .Overlay-actionWrap {
      display: flex;
      flex-direction: row;
      gap: $spacer-2;
    }

    .Overlay-titleWrap {
      display: flex;
      padding: ($spacer-2 * 0.75) 0 ($spacer-2 * 0.75) $spacer-2;
      flex-direction: column;
      flex-grow: 1;
      gap: $spacer-1;

      .Overlay-title {
        margin: 0;
        font-size: $body-font-size;
        font-weight: $font-weight-bold;
      }

      .Overlay-description {
        margin: 0;
        font-size: $font-size-small;
        font-weight: $font-weight-normal;
        color: var(--color-fg-muted);
      }
    }
  }
}

// generic body content slot
.Overlay-body {
  padding: $spacer-3;
  padding-top: 0;
  overflow-y: auto;
  scrollbar-width: thin;
  font-size: $body-font-size;
  flex-grow: 1;

  &.Overlay-body--paddingCondensed {
    padding: $spacer-2;
    padding-top: 0;
  }

  &.Overlay-body--paddingNone {
    padding: 0;
  }
}

// generic footer slot
.Overlay-footer {
  z-index: 1;
  display: flex;
  padding: 0 $spacer-3 $spacer-3 $spacer-3;
  flex-direction: row;
  flex-shrink: 0;
  flex-wrap: wrap;

  &.Overlay-footer--divided {
    padding-top: $spacer-3;
    // stylelint-disable-next-line primer/box-shadow
    box-shadow: inset 0 $border-width var(--color-border-default);
  }

  &.Overlay-footer--alignStart {
    justify-content: flex-start;
    gap: $spacer-2;
  }

  &.Overlay-footer--alignCenter {
    justify-content: center;
    gap: $spacer-2;
  }

  &.Overlay-footer--alignEnd {
    justify-content: flex-end;
    gap: $spacer-2;
  }
}

// TODO: replace with refactored IconButton
.Overlay-closeButton {
  position: relative;
  display: grid;
  width: $spacer-5;
  height: $spacer-5;
  padding: 0;
  color: var(--color-fg-muted);
  cursor: pointer;
  user-select: none;
  background-color: transparent;
  border: $border-width $border-style transparent;
  border-radius: $border-radius;
  transition: 0.2s cubic-bezier(0.3, 0, 0.5, 1);
  transition-property: color, background-color, border-color;
  place-content: center;
  align-self: flex-start;
  flex-shrink: 0;

  &:hover,
  &:focus {
    background-color: var(--color-btn-hover-bg);
    border: $border-width $border-style var(--color-btn-hover-bg);
  }
}

@mixin Overlay-backdrop() {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 999;
  display: flex;
  background-color: var(--color-neutral-muted);
}

@mixin Overlay-backdrop--transparent() {
  position: absolute;
  background-color: transparent;
  z-index: 999;
}

// variants must be mixins so we can extend within a media query (@extend is not supported inside media queries)

// border-radius repeats within placement options to ensure the original radius is reset when two classes co-exist

// center
@mixin Overlay-backdrop--center {
  @include Overlay-backdrop;

  align-items: center;
  justify-content: center;
}

// anchor
@mixin Overlay-backdrop--anchor {
  @include Overlay-backdrop--transparent;

  .Overlay {
    //width: auto;
  }
}

// anchor side(s)
@mixin Overlay-backdrop--side($viewportRange: '') {
  @include Overlay-backdrop;

  // default left
  align-items: center;
  justify-content: left;

  &.Overlay-backdrop--placement-left#{$viewportRange} {
    align-items: center;
    justify-content: left;

    .Overlay {
      animation: $primer-duration-slow $primer-easing-out Overlay--motion-slideInRight;
      border-radius: $primer-borderRadius-large;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      height: 100vh;

      @supports(height: 100dvh) {
        height: 100dvh;
      }
    }
  }

  &.Overlay-backdrop--placement-right#{$viewportRange} {
    align-items: center;
    justify-content: right;

    .Overlay {
      animation: $primer-duration-slow $primer-easing-out Overlay--motion-slideInLeft;
      border-radius: $primer-borderRadius-large;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      height: 100vh;

      @supports(height: 100dvh) {
        height: 100dvh;
      }
    }
  }

  &.Overlay-backdrop--placement-bottom#{$viewportRange} {
    align-items: end;
    justify-content: center;

    .Overlay {
      animation: $primer-duration-slow $primer-easing-out Overlay--motion-slideInUp;
      border-radius: $primer-borderRadius-large;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  &.Overlay-backdrop--placement-top#{$viewportRange} {
    align-items: start;
    justify-content: center;

    .Overlay {
      animation: $primer-duration-slow $primer-easing-out Overlay--motion-slideInDown;
      border-radius: $primer-borderRadius-large;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }
}

// full width
@mixin Overlay-backdrop--full {
  @include Overlay-backdrop;

  .Overlay {
    width: 100%;
    max-width: 100vw;
    height: 100%;
    max-height: 100vh;
    border-radius: unset;
    flex-grow: 1;

    @supports(height: 100dvh) {
      max-width: 100dvw;
      max-height: 100dvh;
    }
  }
}

// Overlay variant classnames
@media (min-width: #{map-get($breakpoints, 'md')}) {
  // Regular viewports
  .Overlay-backdrop--center {
    @include Overlay-backdrop--center;
  }

  .Overlay-backdrop--anchor {
    @include Overlay-backdrop--anchor;
  }

  .Overlay-backdrop--side {
    @include Overlay-backdrop--side;
  }

  .Overlay-backdrop--full {
    @include Overlay-backdrop--full;
  }
}

// responsive variants
// up to 767px
@media (max-width: #{map-get($breakpoints, 'md') - 0.02px}) {
  .Overlay-backdrop--center-whenNarrow {
    @include Overlay-backdrop--center;
  }

  .Overlay-backdrop--anchor-whenNarrow {
    @include Overlay-backdrop--anchor;
  }

  .Overlay-backdrop--side-whenNarrow {
    @include Overlay-backdrop--side('-whenNarrow');
  }

  .Overlay-backdrop--full-whenNarrow {
    @include Overlay-backdrop--full;
  }
}


// Animations
// ==========
// Todo: Replace with Primer Primitives motion tokens

@keyframes Overlay--motion-slideInUp {
  from { transform: translateY(25%) }
}
@keyframes Overlay--motion-slideInDown {
  from { transform: translateY(-25%) }
}
@keyframes Overlay--motion-slideInRight {
  from { transform: translateX(-25%) }
}
@keyframes Overlay--motion-slideInLeft {
  from { transform: translateX(25%) }
}
@keyframes Overlay--motion-scaleFade {
  from {
    opacity: 0;
    transform: scale(0.8);
  }

  to {
    opacity: 1;
    transform: scale(1);
  }
}